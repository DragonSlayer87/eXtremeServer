//
// Project: 			Cubescript Time Controler 
// File Name: 			TimeControler.cfg
// Date: 				2016/2017
// Author: 				BudSpencer
// Version: 			1.2.0
// 
// Purpose: 			Cubescript time controler, define some useful constants and commands for #info command
// New: 				format time routines + uptime format adapter
//


// define some very useful constants for time (every variable is time in milliseconds)
microsecond = ( div 1 1000 ) // 1 microsecond
millisecond = 1 // 1 millisecond
second = 1000 // 1 second
minute = ( * 1000 60 ) // 1 minute
fiveminutes = ( * ( * 1000 60 ) 5 ) // five minutes
tenminutes = ( * ( * 1000 60 ) 10 ) // ten minutes
fifteen = ( * ( * 1000 60 ) 15 ) // fifteen minutes
halfhour = ( div ( * 60000 60 ) 2 ) // half hour
hour = ( * 60000 60 ) // 1 hour
day = ( * ( * 60000 60 ) 24 ) // 1 day
week = ( * ( * ( * 60000 60 ) 24 ) 7 ) // 1 week
month = ( * ( * ( * ( * 60000 60 ) 24 ) 7 ) 4 ) // 1 month
year = ( * ( * ( * ( * ( * 60000 60 ) 24 ) 7 ) 4 ) 12 ) // 1 year
tenyear =  ( * ( * ( * ( * ( * ( * 60000 60 ) 24 ) 7 ) 4 ) 12 ) 10 ) // 10 years
hundredyear = ( * ( * ( * ( * ( * ( * ( * 60000 60 ) 24 ) 7 ) 4 ) 12 ) 10 ) 10 ) // 100 years
thousandyear = ( * ( * ( * ( * ( * ( * ( * ( * 60000 60 ) 24 ) 7 ) 4 ) 12 ) 10 ) 10 ) 10 ) // 1000 years

teammatch_time = ( * ( 60000 ) 15 ) // 15 minutes
normalmatch_time = ( * ( 60000 ) 10 ) // 10 minutes

intermissiontime = ( $imissiontime ) // intermission time, after ending it starting new map
overtime_millisec = ( * ( $overtime ) 1000 ) // overtime in milliseconds, if teams are tied at "normal" intermission

getgamemillis = [ result $gamemillis ; ] // returns current gamemillis 
gettotalmillis = [ result $totalmillis ; ] // returns current totalmillis
gametime = [ setroundtime $arg1 ] 

// format time as "days:hours:minutes:seconds" 
// function wants minutes (and seconds)
returntime_d = [ result ( format "%1:%2:%3:%4" $arg1 $arg2 $arg3 $arg4 ) ]
// format time as "hours:minutes:seconds" 
// function wants minutes (and seconds)
returntime_h = [ result ( format "%1:%2:%3" $arg1 $arg2 $arg3 ) ]
// format time as "minutes:seconds" 
// function wants minutes (and seconds)
returntime_m = [ result ( format "%1:%2" $arg1 $arg2 ) ]
// return unformated string
returnstr = [ result ( format $arg1 ) ]

// return formated uptime string ("years:months:weeks:days:hours:minutes:seconds")
returnuptime_y = [ result ( format "%1:%2:%3:%4:%5:%6:%7" $arg1 $arg2 $arg3 $arg4 $arg5 $arg6 $arg7 ) ]

fmt_ = "%y years %0 months %d days %h hours %m minutes %s seconds"

__UPTIME__ = [ result ( uptimef $fmt_ ) ]
__SYSTIME__ = [ result ( systimef "%c" ) ]
__CONNECTED__ = [ result ( getonline $arg1 ) ]

getday = [
	cases ( getdaycode ) "Mon" [
		result "Monday"
	] "Tue" [
		result "Tuesday"
	] "Wed" [
		result "Wednesday" 
	] "Thu" [ 
		result "Thursday" 
	] "Fri" [ 
		result "Friday" 
	] "Sat" [ 
		result "Saturday"
	] "Sun" [ 
		result "Sunday"
	]	
]

getmonth = [
	cases ( getmonthcode ) "Jan" [
		result "January" 
	] "Feb" [
		result "February"
	] "Mar" [
		result "March" 
	] "Apr" [
		result "April"
	] "Aug" [
		result "August"
	] "Sep" [
		result "September"
	] "Oct" [ 
		result "October"
	] "Nov" [
		result "November"
	] "Dec" [
		result "December"
	] [
		result ( getmonthcode )
	]
] 

getsuffix = [ 
	if ( || ( || ( =s ( getdaynum ) "1" ) ( =s ( getdaynum ) "21" ) ) ( =s ( getdaynum ) "31" ) ) [ result "st" ]
	if ( || ( =s ( getdaynum ) "2" ) ( =s ( getdaynum ) "22" ) ) [ result "nd" ]
	if ( || ( =s ( getdaynum ) "3" ) ( =s ( getdaynum ) "23" ) ) [ result "rd" ]
		result "th"
]
	

getsystime = [
	// update all required variables 
	gettime = [ result ( systimef "%c" ) ]
	getdaynum = [ result ( systimef "%d" ) ]
	getyear = [ result ( concatword "20" ( getyearcode ) ) ]
	getlocaltime = [ result ( at ( gettime ) 1 ) ]
	
	getdaycode = [ result ( systimef "%a" ) ]
	getmonthcode = [ result ( systimef "%b" ) ]
	getyearcode = [ result ( systimef "%y" ) ]
	
		info_localtime_msg = ( format "^f4%1^f7, the ^f4%2%3 %4 %5^f7. Time: ^f4%6" ( getday ) ( getdaynum ) ( getsuffix ) ( getmonth ) ( getyear ) ( getlocaltime ) )
			result $info_localtime_msg
]

// calculate time display (return it as "days:hours:minutes:seconds")
ftime_d_h_m_s = [
	days = 0 ; hours = 0 ; minutes = -1 ; seconds = -1
	if ( =s ( getalias arg1 ) "" ) [ minutes = 0 ] [ minutes = $arg1 ]
	if ( =s ( getalias arg2 ) "" ) [ seconds = 0 ] [ seconds = $arg2 ]
	
		if ( >= $seconds 60 ) [
			loop secs ( div $seconds 60 ) [ minutes = ( + $minutes 1 ) ]
			seconds = ( mod $seconds 60 )
		]
		if ( >= $minutes 60 ) [
			loop mins ( div $minutes 60 ) [ hours = ( + $hours 1 ) ]
			minutes = ( mod $minutes 60 )
		]
		if ( >= $hours 24 ) [
			loop hour ( div $hours 24 ) [ days = ( + $days 1 ) ]
			hours = ( mod $hours 24 )
		]
		// put "0" before time values < 10 (for better syntax)
			if ( < $seconds 10 ) [ seconds = ( concatword "0" $seconds ) ]
			if ( < $minutes 10 ) [ minutes = ( concatword "0" $minutes ) ]
			if ( < $hours 10 ) [ hours = ( concatword "0" $hours ) ]
			if ( < $days 10 ) [ days = ( concatword "0" $days ) ]
			
				returntime_d $days $hours $minutes $seconds
]

// calculate time display (return it as "hours:minutes:seconds")
ftime_h_m_s = [
	hours = 0 ; minutes = -1 ; seconds = -1
	if ( =s ( getalias arg1 ) "" ) [ minutes = 0 ] [ minutes = $arg1 ]
	if ( =s ( getalias arg2 ) "" ) [ seconds = 0 ] [ seconds = $arg2 ]
	
		if ( >= $seconds 60 ) [
			loop secs ( div $seconds 60 ) [ minutes = ( + $minutes 1 ) ]
			seconds = ( mod $seconds 60 )
		]
		if ( >= $minutes 60 ) [
			loop mins ( div $minutes 60 ) [ hours = ( + $hours 1 ) ]
			minutes = ( mod $minutes 60 )
		]
		// put "0" before time values < 10 (for better syntax)
			if ( < $seconds 10 ) [ seconds = ( concatword "0" $seconds ) ]
			if ( < $minutes 10 ) [ minutes = ( concatword "0" $minutes ) ]
			if ( < $hours 10 ) [ hours = ( concatword "0" $hours ) ]
			
				returntime_h $hours $minutes $seconds 
]

// calculate time display (return it as "minutes:seconds")
ftime_m_s = [
    minutes = -1 ; seconds = -1
	if ( =s ( getalias arg1 ) "" ) [ minutes = 0 ] [ minutes = $arg1 ]
	if ( =s ( getalias arg2 ) "" ) [ seconds = 0 ] [ seconds = $arg2 ]
	
		if ( >= $seconds 60 ) [
			loop secs ( div $seconds 60 ) [ minutes = ( + $minutes 1 ) ]
			seconds = ( mod $seconds 60 )
		]
		// put "0" before time values < 10 (for better syntax)
			if ( < $seconds 10 ) [ seconds = ( concatword "0" $seconds ) ]
			if ( < $minutes 10 ) [ minutes = ( concatword "0" $minutes ) ]
			
				returntime_m $minutes $seconds 
]

// format uptime display (return as "years:months:weeks:days:hours:minutes:seconds")
fuptime_y = [ 
	years = ( uptimef "%y" ) ; months = ( uptimef "%o" ) ; weeks = ( uptimef "%w" ) 
	days = ( uptimef "%d" ) ; hours = ( uptimef "%h" ) ; minutes = ( uptimef "%m" )
	seconds = ( uptimef "%s" ) 
	
	// put "0" before time values < 10 (for better syntax)
		if ( < $days 10 ) [ days = ( concatword "0" $days ) ]
		if ( < $weeks 10 ) [ weeks = ( concatword "0" $weeks ) ]
		if ( < $months 10 ) [ months = ( concatword "0" $months ) ]
		if ( < $years 10 ) [ years = ( concatword "0" $years ) ]
		
			returnuptime_y $years $months $weeks $days $hours $minutes $seconds
]

// format online time more prettier (return time as hours:minutes:seconds)
fonlinetime = [
	seconds_ = 0 ; minutes_ = 0 ; hours_ = 0
	if ( =s ( getalias arg1 ) "" ) [ milliseconds = 0 ] [ milliseconds = $arg1 ]
		if ( >= $milliseconds $second ) [
			loop sec__ ( div $milliseconds $second ) [
				seconds_ = ( + $seconds_ 1 )
			]
			milliseconds = ( mod $milliseconds $second )
		]
		
		if ( >= $seconds_ 60 ) [
			loop min__ ( div $seconds_ 60 ) [
				minutes_ = ( + $minutes_ 1 )
			]
			seconds_ = ( mod $seconds_ 60 )
		]
		
		if ( >= $minutes_ 60 ) [
			loop hou__ ( div $minutes_ 60 ) [
				hours_ = ( + $hours_ 1 )
			]
			minutes_ = ( mod $minutes_ 60 )
		]
	
	// put "0" before time values < 10 (for better syntax)
		if ( > 10 $seconds_ ) [ seconds_ = ( concatword "0" $seconds_ ) ]
		if ( > 10 $minutes_ ) [ minutes_ = ( concatword "0" $minutes_ ) ]
		if ( > 10 $hours_ ) [ hours_ = ( concatword "0" $hours_ ) ]
		
			returntime_h $hours_ $minutes_ $seconds_
]







			
