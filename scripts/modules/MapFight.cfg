//
// Project: 		Mapfight for GoldMod Collect
// File Name: 		MapFight.cfg
// Date: 			Dec, 2016
// Author: 			BudSpencer
// Version: 		2.0.0 Final
//
// Purpose: 		vote for mapy by typing 1 or 2
// NOTE: 			THIS SCRIPT IS STANDALONE! IT DOESN'T USE ANY COMMANDS DEFINED IN REMOD/GOLDMOD, it just uses some predefined core commands
//


// maps for all modes exept ctf
maplist_deathmatch = [
complex douze ot academy metl2 metl3 justice turbine hashi mbt2 fanatic_quake dock renegade curvy_castle nmp8 tartech aard3c
skrdm1 bvdm_01 outpost park tumwalk industry injustice mbt10 curvedm kalking1 hog2 kffa fragplaza collusion duel8 alithia island
frozen memento neondevastation alloy ruine DM_BS1 shinmei1 osiris sdm1 powerplant oasis metl4 ruby shindou dune gubo teahupoo
rm5 depot masdm orbe torment legazzo fury mbt9 refuge shadowed dirtndust force killfactory moonlite castle_trap orion ogrosupply
nucleus elegy shiva arbana simplicity pitch_black duel7 suburb roughinery stemple tejen pgdm deathtek hades corruption paradigm lostinspace
sauerstruck phosgene neonpanic akaritori konkuri-to katrez_d oddworld guacamole wake5 frostbyte thor aqueducts ksauer1 kmap5 thetowers darkdeath wdcd
]

// maplist for capture modes
maplist_cap = [
urban_c nevil_c fb_capture collusion c_valley lostinspace fc3 face-capture nmp4 nmp8 hallo tempest monastery alithia hades fc4 relic
fc5 paradigm corruption asteroids ogrosupply reissen akroseum turbulence frostbyte c_egypt caribbean dust2 campo dirtndust damnation arabic spcr
nucleus evilness subterra snapper_rocks kopenhagen asgard mbt12 cwcastle nitro suburb haste valhalla abbey venice mercury core_transfer hidden 
forge eternal_valley tortuga core_refuge infamy capture_night river_c serenity xenon nmp9 ph-capture killcore3 twinforts duomo donya
]

// maplist for ctf modes
maplist_ctf = [
hallo flagstone tempest siberia reissen tejen shipwreck authentic urban_c bt_falls valhalla garden mbt1 autumn akroseum face-capture dust2
mach2 evilness turbulence l_ctf twinforts berlin_wall mbt12 europium abbey redemption damnation forge campo nitro infamy catch22 subterra
forgotten nucleus bad_moon snapper_rocks haste spcr asgard mill capture_night arbana hidden eternal_valley mercury kopenhagen tortuga mbt4 core_refuge core_transfer 
desecration recovery wdcd suburb xenon sacrifice
]

// modes list
DM-MODES_ = "ffa teamplay insta instateam effic efficteam tac tacteam instacollect efficcollect"
CAPTURE-MODES_ = "capture regencapture"
CTF-MODES_ = "ctf instactf protect instaprotect hold instahold efficctf efficprotect effichold collect instacollect efficcollect"

isworking = 0
isintermission = 0
map1 = ""
map2 = ""
votes_map1 = 0
votes_map2 = 0
mapfight_public = [ say ( concatword ( format "[^f3MAP^f4FIGHT^f7] " ) $arg1 ) ]
mapfight_private = [ pm $arg1 ( concatword ( format "[^f3MAP^f4FIGHT^f7] " ) $arg2 ) ]
mapfight_error = [ say ( concatword ( format "[^f3MAP^f4FIGHT^f7] (Error): " ) $arg1 ) ]
mapfight_private_error = [ pm $arg1 ( concatword ( format "[^f3MAP^f4FIGHT^f7] (Error): " ) $arg2 ) ]
return = [ result $arg1 ] // return specified values
pick_rand_map = [ return ( at $arg1 ( rnd ( listlen $arg1 ) ) ) ]
break = [ return -1 ] // return -1 if errors
templist = ( format "" )
istie = 0
m = "" ; v = 0
hasvoted_l = ""

// getwinner per votes
getwinner = [
	if ( = $votes_map1 $votes_map2 ) [ // if both votes are same of nobody voted
		istie = 1
		return ( at ( format "%1 %2" $votes_map1 $votes_map2 ) ( rnd 2 ) )
	] [
		istie = 0
		return ( max $votes_map1 $votes_map2 )
	]
]

// get winnermap (by votes)
getwinnermap = [
	case ( getwinner ) $votes_map1 [
		return $map1
	] $votes_map2 [
		return $map2 
	]
]
		
Do_Mapfight_Init_Sequence = [
	if ( = $enable_mapvote 1 ) [
		isintermission = 1 ; isworking = 1 ; mapvote_work 1
		if ( > ( indexof $DM-MODES_ ( modetostr ( getmode ) ) ) -1 ) [ map1 = ( pick_rand_map $maplist_deathmatch ) ; map2 = ( pick_rand_map $maplist_deathmatch ) ] [ // if mode is a deathmatch mode
		if ( > ( indexof $CAPTURE-MODES_ ( modetostr ( getmode ) ) ) -1 ) [ map1 = ( pick_rand_map $maplist_cap ) ; map2 = ( pick_rand_map $maplist_cap ) ] [ // if mode is a capture mode
		if ( > ( indexof $CTF-MODES_ ( modetostr ( getmode ) ) ) -1 ) [ map1 = ( pick_rand_map $maplist_ctf ) ; map2 = ( pick_rand_map $maplist_ctf ) ] ] ] [ // if mode is a ctf mode
		// check for some errors
			mapfight_error ( format "Server is using ^f3invalid ^f7gamemode^f7. Valid Modes: ^f4%1 %2 %3 ^f7" $DM-MODES_ $CAPTURE-MODES_ $CTF-MODES_ ) ; isworking = 0 ; break ] // return if errors with modes -> no map can't be picked
			if ( || ( =s $map1 "" ) ( =s $map2 "" ) ) [ mapfight_error ( format "There are problems with the map ^f3variables^f7, breaking ^f4mapfight ^f7now ..." ) ; isworking = 0 ; break ] // if errors with map variables
		
		mapfight_public ( format "Vote for ^f3maps ^f7(^f4%1 ^f7or ^f4%2^f7) ^f7with ^f41^f7 or ^f42^f7." $map1 $map2 )
		asleep ( - $imissiontime 3000 ) [ 
			if ( $isintermission ) [ isworking = 0 ; if ( = $votes_map1 $votes_map2 ) [ istie = 1 ] [ istie = 0 ] ; if ( $istie ) [ mapfight_public ( format "No Map is ^f3winning^f7! I randomly pick ^f4%1 ^f7as next map!" ( getwinnermap ) ) ] [ 
				mapfight_public ( format "Winner Map: ^f3%1 ^f7with ^f4%2 ^f7Votes^f7." ( getwinnermap ) ( getwinner ) ) ]
			]
		]
		asleep ( - $imissiontime 500 ) [ if ( $isintermission ) [ mapmode ( getwinnermap ) ( getmode ) ] ]
	]
	return 0
]

Do_Mapfight_Vote_Sequence = [
	if ( && ( $enable_mapvote ) ( $isworking ) ( $isintermission ) ) [
		cases $arg2 "1" [
			votes_map1 = ( + $votes_map1 1 )
			v = $votes_map1 ; m = $map1
		] "2" [
			votes_map2 = ( + $votes_map2 1 )
			v = $votes_map2 ; m = $map2
		]
		if ( && ( || ( =s $arg2 "1" ) ( =s $arg2 "2" ) ) ( = ( indexof $hasvoted_l ( getip $arg1 ) ) -1 ) ) [ mapfight_public ( format "Player ^f3%1(%2) ^f7has voted for map ^f4'%3'^f7. (^f4%4 ^f7- ^f4%5 ^f7Votes / ^f4%6 ^f7- ^f4%7 ^f7Votes)" ( getname $arg1 ) $arg1 $m $map1 $votes_map1 $map2 $votes_map2 ) ; hasvoted_l = ( listadd $hasvoted_l ( getip $arg1 ) ) ] [
			if ( && ( || ( =s $arg2 "1" ) ( =s $arg2 "2" ) ) ( > ( indexof $hasvoted_l ( getip $arg1 ) ) -1 ) ) [ mapfight_private_error $arg1 ( format "You already ^f3voted ^f7for a ^f4map^f7. You can't vote ^f4again^f7." ) ] ]
	] [
		return 0
	]
]

Do_Mapfight_Reset_Sequence = [ mapvote_work 0 ; isintermission = 0 ; istie = 0 ; isworking = 0 ; map1 = "" ; map2 = "" ; votes_map1 = 0 ; votes_map2 = 0 ; templist = ( format "" ) ; m = "" ; v = 0 ; hasvoted_l = "" ; break ]



// we register our required event handlers
addhandler "onvoteformap" Do_Mapfight_Vote_Sequence
addhandler "onimission" Do_Mapfight_Init_Sequence
addhandler "onmapstart" Do_Mapfight_Reset_Sequence

	
	
	
