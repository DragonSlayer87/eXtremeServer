//  HERE ARE COMMON FUNCTIONS AND VARIABLES

//-------- CONSTANTS --------//

PI = 3.14159265358979323846264338327

//IRC colors
ircgreen    = [ result ( concatword "g" $arg1 ) ] //green    
ircblue     = [ result ( concatword "b" $arg1 ) ] //blue     
ircyellow   = [ result ( concatword "y" $arg1 ) ] //yellow   
ircred      = [ result ( concatword "r" $arg1 ) ] //red      
ircgrey     = [ result ( concatword "a" $arg1 ) ] //grey     
ircmagenta  = [ result ( concatword "m" $arg1 ) ] //magenta  
ircorange   = [ result ( concatword "o" $arg1 ) ] //orange   
irccyan     = [ result ( concatword "c" $arg1 ) ] //cyan     
ircviolet   = [ result ( concatword "v" $arg1 ) ] //violet   
ircpurple   = [ result ( concatword "p" $arg1 ) ] //purple   
ircbrown    = [ result ( concatword "n" $arg1 ) ] //brown   
ircdgrey	= [ result ( concatword "d" $arg1 ) ] //dark grey
ircreset	= [ result ( concatword "u" $arg1 ) ] //reset to normal color

//Server colors
green 	= [ result ( concatword "^f0" $arg1 ) ] // green: player talk
blue 	= [ result ( concatword "^f1" $arg1 ) ] // blue: "echo" command
yellow 	= [ result ( concatword "^f2" $arg1 ) ] // yellow: gameplay messages
red 	= [ result ( concatword "^f3" $arg1 ) ] // red: important errors
gray 	= [ result ( concatword "^f4" $arg1 ) ] // gray: not important messages
magenta	= [ result ( concatword "^f5" $arg1 ) ] // magenta: auth color
orange	= [ result ( concatword "^f6" $arg1 ) ] // orange: countdown color
white 	= [ result ( concatword "^f7" $arg1 ) ] // default color -> white
std     = [ result ( concatword "^fr" $arg1 ) ] // resets to default color ( white )


// core lists to save some values as public

MODENAMES = "ffa coop teamplay insta instateam effic efficteam tac tacteam capture regencapture ctf instactf protect instaprotect hold instahold efficctf efficprotect effichold collect instacollect efficcollect"

TEAMMODES = "teamplay instateam efficteam tacteam capture regencapture ctf instactf efficctf protect instaprotect efficprotect hold instahold effichold instacolelct efficcollect"

FLAGMODES = "ctf instactf efficctf protect instaprotect efficprotect hold instahold effichold"

CTFMODES = "ctf instactf efficctf"

DUELMODES = "ffa teamplay insta instateam effic efficteam tac tacteam capture regencapture ctf instactf protect instaprotect hold instahold efficctf efficprotect effichold collect instacollect efficcollect"

KILLMODES = "teamplay instateam efficteam tacteam capture regencapture"

EFFICMODES = "effic efficteam efficctf efficprotect effichold efficcollect"

DISABLED-NAMES = "hure yousuck bitchass nigger nigga kinderficker didisucksdicks WhoAmI? unknown-bitch kike polake motherfucker suckmydick ? jude kanake polake wichser wixxer wixer DonaldTrump AdolfHitler HeinrichHimmler JosephGoebbels OskarSchindler"

DISALLOWED-WORDS = "nigger nigga negro kike faggot motherfucker jude wichser wixxer kanake polake kinderficker fuckyou fucking-kid jerk kurwa. Kurwa. Kurva. kurva. kurva kurwa Kurwa Kurva niga niggaz halde-babba nazi jew Adolf Hitler DonaldTrump"

PRIVNAMES = "none master master admin root"

RAND-NAMES = "Muffin Loopy Bobby Tim Sebastian Kitti123 insanity Rindvieh Sauerbraten PC IRC ILoveFlowers Cube CubeScript MapLike (*_*) Useful Ugly Beautiful Gem√ºse Gurke Banane Wassermelone<3"

DM-MODES = "ffa teamplay insta instateam effic efficteam tac tacteam instacollect efficcollect"

DM__MODES = "ffa coop insta tac efficctf effichold efficprotect effic"

OTHERS = "ffa coop efficctf effichold efficprotect"

EFFICCTF = "efficctf effichold efficprotect"

CAPTURE-MODES = "capture regencapture"

CTF-MODES = "ctf instactf protect instaprotect hold instahold efficctf efficprotect effichold collect instacollect efficcollect"



//-------- SOME USEFUL FUNCTIONS --------//

//////////////////
// Convert mode number to string. Uses $MODENAMES
// @arg1 mode number
// @group server
// @return mode name
// @example (modetostr 0) //returns ffa
modetostr = [
	result (at $MODENAMES $arg1)
]
//////////////////
// Checks if list contains specified item
// @group server
// @arg1 List
// @arg2 item to check
// @return 1 if list contains the item, otherwise 0
// @example isinlist "1 2 3" "3" //returns 1
isinlist = [ 
	result (!= (indexof $arg1 $arg2) -1) 
]

//////////////////
// Returns list of client numbers of all connected players
// @group player
// @return list of cn
allplayers = [ 
	result (listclients) 
]

//////////////////
// Returns client numbers of all active players (not spectators)
// @group player
// @return list of player's cn
allactiveplayers = [
	all = (listclients)
	res = ""
	looplist cn $all [
		if (&& (= (playerexists $cn) 1) (= (isspectator $cn) 0)) [
			res = (concat $res $cn)
		]
	]
	result $res
]

///////////////////
// returns client number list with all spectators
// @group player
// @return list of player's cn 
allspectators = [
res = ""
looplist cn ( listclients ) [
	if ( = ( isspectator $cn ) 1 ) [
		res = ( concat $res $cn )
		]
	]
	result $res
]

//////////////////
// Returns KpD (kills per deathes) of player
// @group player
// @arg1 cn of player
// @return float number
getkpd = [
	deathes = (getdeaths $arg1)
	frags = (getfrags $arg1)
	
	result (? $deathes (divf (div (* 10 $frags) $deathes) 10) (? $frags $frags 0))
]

//////////////////
// Return number of stealed frags (works correct only in effic, difference between real damage and number of frags)
// @group player
// @arg1 cn
// @return number
getstealfrags = [
    frags = (+ (getfrags $arg1) (getsuicides $arg1))
    damage = (getdamage $arg1)    
    should_frags = (div $damage 200) // 200 is damage per kill in effic
    result (- $frags $should_frags)
]

//////////////////
// Returns formatted and colored "usage" string for specified command
// @group server
// @arg1 command name
// @return usage  string 
usage = [ 
	result (concatword "^f7Usage: ^f4" $commandchar (commandhelp $arg1))
]

//////////////////
// Prints specified string to output (log) with timestamp
// @group server
// @arg1 string
// @return [timestamp] string  
log = [
	echo (format "[%1] %2" (systimef "%Y-%m-%d %X") $arg1)
]

//////////////////
// Prints error message to output (log) with timestamp
// @group server
// @arg1 string
// @example log_error "Could not create DB connection"  
log_error = [
	echo (format "[%1] [ERROR] %2" (systimef "%Y-%m-%d %X") $arg1)
]

//////////////////
// Prints warning message to output (log) with timestamp
// @group server
// @arg1 string
// @example log_warn "SQLite could be wery slow on module 'spy', please use MySQL instead"  
log_warn = [
	echo (format "[%1] [WARN] %2" (systimef "%Y-%m-%d %X") $arg1)
]

//////////////////
// Prints info message to output (log) with timestamp
// @group server
// @arg1 string
// @example log_info "Make install, not war"
log_info = [
	echo (format "[%1] [INFO] %2" (systimef "%Y-%m-%d %X") $arg1)
]

//////////////////
// prints a cheater warning to log_cheater
// @group server 
// @arg1 string
// Example: log_cheater ( format "LOL" ) -> print "LOL" to log (with current system time)
log_cheater = [
	echo ( format "[%1] [CHEATER-DETECTION] %2" (systimef "%Y-%m-%d %X") $arg1 )
]

//////////////////
// prints a user system info message to log with timestamp
// @group server
// @arg1 string to send
// @example: log_user ( format "ioi" ) -> print "ioi" to log (with current system time)
log_user = [
	echo ( format "[%1] [USER-SYSTEM] %2" ( systimef "%Y-%m-%d %X" ) $arg1 )
]

//////////////////
// prints a user system error message to log with timestamp
// @group server
// @arg1 string to send
// @example: log_user_error ( format "ERROR:X" ) -> print "ERROR:X" to log (with current system time)
log_user_error = [
	echo ( format "[%1] [USER-SYSTEM] [ERROR] %2" ( systimef "%Y-%m-%d %X" ) $arg1 )
]

//////////////////
// Execute all .cfg files in directory
// @group server
// @arg1 directory
execdir = [
	dir = $arg1
	i = 0
	loopfiles f $dir cfg [		
		file = (format "%1/%2.cfg" $dir $f) 
		// log (format "executing '%1'" $file) // -> would return a log string on every loop
		exec $file
		i = (+ $i 1)
 	]
	log_info (format ">>> executed %1 files in '%2' <<" $i $dir)		
]

//////////////////
// Convert milliseconds to time string
// @group server
// @arg1 milliseconds
// @return %d days %h hours %m minutes
millistostr = [
	res = ""
	if (>= (div $arg1 86400000) 1) [
		res = (formatmillis "%d days %h hours %m minutes" $arg1)
	] [
		if (>= (div $arg1 3600000) 1) [
			res = (formatmillis "%h hours %m minutes" $arg1)
		] [
			if (>= (div $arg1 60000) 1) [
				res = (formatmillis "%m minutes" $arg1)	
			]
		]
	] 
	result $res
]

//////////////////
// Initialize vaiable $arg1 with default value $arg2 if it's not initialized yet
// @group server
// @arg1 vaiable
// @arg2 default value
// @example defaultvalue "var_name" "value" // if there is no $var_name before this call, does $var_name = "value" 
defaultvalue = [
	if (=s "" (getalias $arg1)) [
		alias $arg1 $arg2
	] 
]

//////////////////
// Prettify escaped list (add commas) with unescaped list items
// @group server
// @arg1 escaped list
// @example prettyescapedlist "|RB|degrave |RB|^^o_o^^ ^"strangenickname^"^^" // returns  |RB|degrave, |RB|^o_o^, "strangenickname"^
prettyescapedlist = [
	res = ""
	first = 1
	log_info $arg1
	looplist v $arg1 [
		if $first [
			first = 0
			res = (unescape $v)
		] [
			res = (concatword $res ", " (unescape $v))
		]
	]
	result $res
]

//////////////////
// Concatenate string with commas 
// @group server
// @arg1 string
// @arg2 new item
// @example concatwithcommas "item1" "item2" // returns "item1, item2"
concatwithcommas = [
	res = ""
	if (=s "" $arg1) [
		res = $arg2
	] [
		res = (concatword $arg1 ", " $arg2)
	]
	result $res
]

//////////////////
// Deprecated set client privelege
// @group server
// @arg1 cn
// @arg2 priv
setmaster = [
	cn = $arg1
	val = $arg2
	
	log_warn "setmaster is deprecated, please use setpriv instead"
	setpriv $cn $val
]

//////////////////
// Deprecated set client privelege
// @group player
// @arg1 priv
// @return privelege name
privname = [ result (at $PRIVNAMES $arg1) ]

//////////////////
// Check if server in team mode
// @group server
// @return 1 if team mode, otherwise 0
isteammode = [ if (= (isinlist $TEAMMODES (modetostr (getmode))) 1) [ result 1 ] [ result 0 ] ]

//////////////////
// Check if server in flag mode
// @group server
// @return 1 if flag mode, otherwise 0
isflagmode = [ if (= (isinlist $FLAGMODES (modetostr (getmode))) 1) [ result 1 ] [ result 0 ] ]

//////////////////
// Check if server in ctf mode
// @group server
// @return 1 if ctf mode, otherwise 0
isctfmode = [ if (= (isinlist $CTFMODES (modetostr (getmode))) 1) [ result 1 ] [ result 0 ] ]

//////////////////
// Check if server in duel mode
// @group server
// @return 1 if duel mode, otherwise 0
isduelmode = [ if ( = (isinlist $DUELMODES ( modetostr ( getmode ) ) ) 1 ) [ result 1 ] [ result 0 ] ]

/////////////////
// isadmin 
// returns 1, if player ( $arg2 ) is admin
// returns 0, if not
isadministrator = [
	perm = ( getperm $arg2 )
	if ( = $perm 3 ) [
		result 1	
	] [	
		result 0
	]
]

/////////////////
// ismaster
// returns 1, if player ( $arg2 ) is master
// returns 0, if not
isinmastermode = [
	perm = ( getperm $arg2 )
	if ( = $perm 2 ) [
	result 1
	] [
	result 0
	]
]

/////////////////
// isnormal
// returns 1, if player ( $arg2 ) is normal player ( without advanced privileges )
// returns 0, if not
isnormal = [
	perm = ( getperm $arg2 )
	if ( = $perm 1 ) [
	result 1
	] [
	result 0
	]
]

/////////////////
// getprivilege 
// gets privilege-name of player and return it
// $arg1 - player
getprivilege = [
	case ( getperm $arg1 ) 4 [
		result "Root" 
	] 3 [
		result "Administrator"
	] 2 [
		result "Master" 
	] 1 [
		result "Normal"
	]
]

/////////////////
// allbots
// returns number currently connected of bots
allbots = [
number_bots = 0
looplist cn ( allplayers ) [
	if ( >= $cn 128 ) [
		number_bots = ( + $number_bots 1 ) 
		]	
	]
	result $number_bots
]

/////////////////
// isbot
// returns 1, if player is bot, else 0
isbot = [ if ( >= $arg1 128 ) [ result 1 ] [ result 0 ] ]
return =  [ result $arg1 ]


//////////////////////////////////////////
//////// POSITION GETTER FUNCTIONS ///////

// get x position
xpos = [ 
	a = ( getpos $arg1 ) 
	x = ( at $a 0 )
	result $x 
]

// get y position
ypos = [ 
	a = ( getpos $arg1 )
	y = ( at $a 1 )
	result $y
]

// get z position
zpos = [
	a = ( getpos $arg1 )
	z = ( at $a 2 )
	result $z
]

//////////////////////////////////////////


/////////////////
// allspectators
// returns list of all spectators
allspectators = [
spec_list = []
	looplist cn ( allplayers ) [ 
		if ( isspectator $cn ) [
			spec_list = ( listadd $spec_list $cn )
		]
	]
	result $spec_list 
]

////////////////////
// numspectators 
// returns number of currently connected spectators
// if nothing - return 0
numspectators = [
	if ( > ( listlen ( allspectators ) ) 0 ) [ result ( listlen ( allspectators ) ) ] [ result 0 ]
]

////////////////////
// numplayers
// returns number of players (+ bots)
// otherwise 0
numplayers = [
	if ( > ( listlen ( listclients ) ) 0 ) [ result ( listlen ( listclients ) ) ] [ result 0 ]
]

__TRUE__ = 1
__FALSE__ = 0

////////////////////
// getvkmslimit 
// get number of required clients for voting for kick or voting for intermission
// $arg1 == ( numclients ) -> $arg1 should be ( numclients ) like: var = ( getvkmslimit ( numclients ) )
// new much better function by obst
getvkmslimit = [ var = ( + ( div $arg1 2 ) ( mod $arg1 2 ) ) ; result $var ]

///////////////////
// getstolenflags
// return the number of stolen flags
// if nothing = 0
getstolenflags = [
	result ( ? ( getvar $arg1 stolen_fl ) ( getvar $arg1 stolen_fl ) 0 )
]

///////////////////
// getreturnedflags
// return the number of returned flags
// if nothing = 0
getreturnedflags = [
	result ( ? ( getvar $arg1 returned_fl ) ( getvar $arg1 returned_fl ) 0 )
]

///////////////////
// getdroppedflags
// return the number of dropped flags
// if nothing = 0
getdroppedflags = [
	result ( ? ( getvar $arg1 dropped_fl ) ( getvar $arg1 dropped_fl ) 0 )
]

///////////////////
// getshots
// return the number of shots, player has made
// if nothing = 0
getshots = [
	result ( ? ( getvar $arg1 shots ) ( getvar $arg1 shots ) 0 ) 
]

///////////////////
// gethits
// return the number of hits, player has made
// if nothing = 0
gethits = [
	result ( ? ( getvar $arg1 hits ) ( getvar $arg1 hits ) 0 ) 
]

///////////////////
// getmisses
// return the number of misses, player has made
// if nothing = 0
getmisses = [
	result ( ? ( getvar $arg1 misses ) ( getvar $arg1 misses ) 0 ) 
]

///////////////////
// getweaponname
// return the name of the weapon, player has input
// if nothing -> it returns -1
getweaponname = [
	case $arg1 1 [
		result "Shotgun"
	] 2 [
		result "Minigun"
	] 3 [
		result "Rocket Launcher"
	] 4 [
		result "Rifle"
	] 5 [
		result "Grenade Launcher"
	] 6 [
		result "Pistol"
	] () [
		result -1
	]
]

//////////////////
// commandisdisabled 
// check if command is disabled 
// returns 1 if command is disabled 
// if not -> it returns 0
command_is_disabled_msg = "Sorry, but this ^f3command ^f7(%1) ^f7is ^f4disabled ^f7on that server^f7."
commandisdisabled = [ if ( && ( ( = indexof $enabled_commands $arg1 ) -1 ) ( > ( indexof $disabled_commands $arg1 ) -1 ) ) [ result 1 ] [ result 0 ] ]







